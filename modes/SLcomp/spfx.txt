//spfx
//
// group "IFX SPFX" "ifx::spfx"
// effect "BleachBypass" "ifx::bbspfx"
// float "opac" "Opacity" .5   0.0  2.0
//
//spfx

float4 bleachBypass(float4 base, float opac)
{
    float3 lumCoeff = float4(0.25,0.65,0.1,0);
	float lum = dot(lumCoeff,base.rgb);
	float3 blend = lum.rrr;
    float L = min(1,max(0,10*(lum- 0.45)));
    float3 result1 = 2.0f * base.rgb * blend;
    float3 result2 = 1.0f - 2.0f*(1.0f-blend)*(1.0f-base.rgb);
	float3 newColor = lerp(result1,result2,L);
    float A2 = opac * base.a;
    float3 mixRGB = A2 * newColor.rgb;
    mixRGB += ((1.0f-A2) * base.rgb);
	return float4(mixRGB,base.a);
}

void main(  in float2 		texCoords : TEXCOORD0, 
	    uniform sampler2D 	map,
	    uniform float	opac,
	    out float4 		outColor : COLOR
	    )

{
float4 c = tex2D(map, texCoords);
outColor.r = bleachBypass(c.r, opac);
outColor.g = bleachBypass(c.g, opac);
outColor.b = bleachBypass(c.b, opac);
outColor.a = c.a;
}

//spfx
//
// group "IFX SPFX" "ifx::spfx"
// effect "Clamper" "ifx::clamperspfx"
//
//spfx

void main(  in float2           texCoords : TEXCOORD0,
            uniform sampler2D   map,
            out float4          outColor : COLOR
            )
{
    float4 c = tex2D(map, texCoords);
    
    if (c.r <0.0) c.r = 0;
    if (c.g <0.0) c.g = 0;
    if (c.b <0.0) c.b = 0;
    if (c.a <0.0) c.a = 0;

    outColor = c;
}

//spfx 
// 
// group "IFX Comp" "ifx::comp"
// effect "Holdout Matte" "ifx::holdout"
// layer  "mask" "Mask"
//
//spfx

void main(  in float2 		texCoords : TEXCOORD0, 
	    uniform sampler2D 	map: TEXUNIT0,
	    uniform sampler2D 	mask: TEXUNIT1,
	    out float4 		outColor : COLOR
	    )
{
    float4 c = tex2D(map, texCoords);
    float4 m = tex2D(mask, texCoords);
    c = c * m;
    outColor = c;
}

//spfx 
// 
// group "IFX Comp" "ifx::comp"
// effect "Add" "ifx::add"
//
//spfx

void main(  in float2 		texCoords : TEXCOORD0, 
	    uniform sampler2D 	map: TEXUNIT0,
	    uniform sampler2D 	mask: TEXUNIT1,
	    out float4 		outColor : COLOR
	    )
{
    float4 c = tex2D(map, texCoords);
    float4 m = tex2D(mask, texCoords);
    c = c + m;
    outColor = c;
}

//spfx 
// 
// group "IFX Comp" "ifx::comp"
// effect "Subtract" "ifx::subtract"
//
//spfx

void main(  in float2 		texCoords : TEXCOORD0, 
	    uniform sampler2D 	map: TEXUNIT0,
	    uniform sampler2D 	mask: TEXUNIT1,
	    out float4 		outColor : COLOR
	    )
{
    float4 c = tex2D(map, texCoords);
    float4 m = tex2D(mask, texCoords);
    c = c - m;
    outColor = c;
}
//spfx 
// 
// group "IFX Comp" "ifx::comp"
// effect "Subtract/Rev" "ifx::subtractrev"
//
//spfx

void main(  in float2 		texCoords : TEXCOORD0, 
	    uniform sampler2D 	map: TEXUNIT0,
	    uniform sampler2D 	mask: TEXUNIT1,
	    out float4 		outColor : COLOR
	    )
{
    float4 c = tex2D(map, texCoords);
    float4 m = tex2D(mask, texCoords);
    c = m - c;
    outColor = c;
}

//spfx 
// 
// group "IFX Comp" "ifx::comp"
// effect "Diff" "ifx::subtractrev"
//
//spfx

void main(  in float2 		texCoords : TEXCOORD0, 
	    uniform sampler2D 	map: TEXUNIT0,
	    uniform sampler2D 	mask: TEXUNIT1,
	    out float4 		outColor : COLOR
	    )
{
    float4 c = tex2D(map, texCoords);
    float4 m = tex2D(mask, texCoords);
    c = abs(m - c);
    outColor = c;
}
//spfx 
// 
// group "IFX SPFX" "ifx::spfx"
// effect "Dots" "ifx::dots"
// float "size" "Size"  3  0.  100.
// color "color" "Color"  1. 1. 1. 1.
// float "soft" "Softness"  0.  0 1.
//
//spfx

void main(  in float2 		texCoords : TEXCOORD0, 
	    uniform sampler2D 	map,
	    uniform float4	color,
	    uniform float	size,
	    uniform float	soft,
 	    uniform float2       delta,
	    out float4 		outColor : COLOR
	    )
{
    float x;
    float y;
    float px;
    float py;
    float d;
    float2 coords;
    int cx, cy;
     int ctx, cty;
    x = texCoords.x;
    y = texCoords.y;
   

    if (size < .1) { 
       size = .1; 
    }
    size = (int)(size * 10);
    x =  x / delta.x;
    y =  y / delta.y;


    cx = (int)x % (int)size;
    cy = (int)y % (int)size;
    ctx = (int)x / (int)size;
    cty = (int)y / (int)size;

    x -= ((float)size *ctx);
    y -= ((float)size* cty);
    x -= (size / 2.);
    y -= (size / 2.);

    d = sqrt(x * x + y * y);
    d =1- (d /size * 2); 
    d = d * (((1-soft)*10) + 1);
    d = min(d, 1);
    coords.x = ((size * ctx) + (size /2.)) * delta.x;
    coords.y = ((size * cty) + (size /2.)) * delta.y;
    float4 c = tex2D(map, coords);

    c = c * d * color;
    outColor = c;
}



//spfx
//
// group "IFX SPFX" "ifx::spfx"
// effect "Gamma" "ifx::gammaspfx"
// float "gamma" "Gamma" 1.0   0.1  4.0
//
//spfx

void main(  in float2           texCoords : TEXCOORD0,
            uniform sampler2D   map,
            uniform float4      gamma,
            out float4          outColor : COLOR
            )
{
    float4 c = tex2D(map, texCoords);

    c.r = pow(c.r, 1/gamma);
    c.g = pow(c.g, 1/gamma);
    c.b = pow(c.b, 1/gamma);

    outColor = c;
}

//spfx
//
// group "IFX SPFX" "ifx::spfx"
// effect "Lin2Log" "ifx::lin2logspfx"
// float "ngamma" "nGamma" .6   0.0  1.0
// float "dgamma" "dGamma" 1.7 0.0 2.6
// float "refwhite" "White Pt"  685  0 1023
// float "refblack" "Black Pt"  95  0 1023
// float "softclip" "Soft Clip" 0 0 50
//
//spfx

float lin2log(float x, float dgamma, float ngamma, float white, float black)
{
    const float gfactor = 1.7*0.5;
    float g = pow(10.0, (black - white)*dgamma/(ngamma*gfactor));
    float gain = 1.0/(1 - g);
    float offset = gain - 1.0;
    return white + log10((x + offset)/gain)*ngamma*gfactor/dgamma;
}

void main(  in float2           texCoords : TEXCOORD0,
            uniform sampler2D   map,
            uniform float       ngamma,
            uniform float       dgamma,
            uniform float       refwhite,
            uniform float       refblack,
            uniform float       softclip,
            uniform float       breakpoint,
            out float4          outColor : COLOR
            )
{
    float4 c = tex2D(map, texCoords);

    refwhite = refwhite/1023.0;
    refblack = refblack/1023.0;
    outColor.r = lin2log(c.r, dgamma, ngamma, refwhite, refblack);
    outColor.g = lin2log(c.g, dgamma, ngamma, refwhite, refblack);
    outColor.b = lin2log(c.b, dgamma, ngamma, refwhite, refblack);
    outColor.a = c.a;
}

//spfx
//
// group "IFX SPFX" "ifx::spfx"
// effect "Log2Lin" "ifx::log2linspfx"
// float "ngamma" "nGamma" .6   0.0  1.0
// float "dgamma" "dGamma" 1.7 0.0 2.6
// float "refwhite" "White Pt"  685  0 1023
// float "refblack" "Black Pt"  95  0 1023
// float "softclip" "Soft Clip" 0 0 50
//
//spfx

float log2lin(float x, float dgamma, float ngamma, float white, float black)
{
    const float gfactor = 1.7*0.5;
    float g = pow(10.0, (black - white)*dgamma/(ngamma*gfactor));
    float gain = 1.0/(1 - g);
    float offset = gain - 1.0;
    return gain*pow(10.0, (x - white)*dgamma/(ngamma*gfactor)) - offset;
}

void main(  in float2           texCoords : TEXCOORD0,
            uniform sampler2D   map,
            uniform float       ngamma,
            uniform float       dgamma,
            uniform float       refwhite,
            uniform float       refblack,
            uniform float       softclip,
            uniform float       breakpoint,
            out float4          outColor : COLOR
            )
{
    float4 c = tex2D(map, texCoords);

    refwhite = refwhite/1023.0;
    refblack = refblack/1023.0;
    outColor.r = log2lin(c.r, dgamma, ngamma, refwhite, refblack);
    outColor.g = log2lin(c.g, dgamma, ngamma, refwhite, refblack);
    outColor.b = log2lin(c.b, dgamma, ngamma, refwhite, refblack);
    outColor.a = c.a;
}

//spfx 
// 
// group "pixelfantastic" "pf::spfx"
// effect "BC_Bazza" "pf::bcBazza"
// float "brightness" "Brightness"  0  -100  100
// float "contrast" "Contrast"  0  -100  100
//
//spfx



void main(  in float2 		texCoords : TEXCOORD0, 
	    uniform sampler2D 	map,
	    uniform float4	color1,
	    uniform float	brightness,
	    uniform float	contrast,
	    out float4 		outColor : COLOR
	    )
	{

color1 = 0.5, 0.5, 0.5,  1.0   ;
brightness = (brightness/100) ;
contrast =   (contrast/100) +.5;

    	float4 c = tex2D(map, texCoords);
	c = c + (brightness);
    outColor = color1+(c-color1)* ((contrast )+.5);
	}


/*pixelfantastic*/




//spfx 
// 
// group "pixelfantastic" "pf::spfx"
// effect "guns_RGB" "pf::gunsRgb"
// imagepoint "align" "Align" 10 10 0 
//
//spfx



void main(  in float2 		texCoords : TEXCOORD0, 
	    	uniform sampler2D 	map,  
            	uniform float4      	align :	POSITION1,            
		uniform float3 		point,	
	    	uniform float4 		tempColor,
	    	out float4 		outColor : COLOR
	    )

{
  float4 c; 
	texCoords.x=texCoords.x - align.x; //overall position
 	texCoords.y=texCoords.y-align.y;
	c = tex2D(map, texCoords.xy ) ;
	tempColor.b = c.b; 

	texCoords.x=texCoords.x + (align.x*2.);
 	texCoords.y=texCoords.y+(align.y*2.);
	c = tex2D(map, texCoords.xy ) ;
	tempColor.r = c.r; 

	texCoords.x=texCoords.x - align.xyz;
 	texCoords.y=texCoords.y-align.y;
	c = tex2D(map, texCoords.xy ) ;
	tempColor.g   = c.g; 
	outColor= tempColor;
}

//spfx 
// 
// group "pixelfantastic" "pf::spfx"
// effect "guns_mono" "pf::gunsMono"
// imagepoint "align" "Align" 10 4 0 
// float "brightness" "Brightness"  -10  -100  100
// float "contrast" "Contrast"  25  -100  100
//
//spfx



void main(  in float2 		texCoords : TEXCOORD0, 
	    	uniform sampler2D 	map,  
            	uniform float4      	align :	POSITION1,            
		uniform float3 		point,	
	    	uniform float4 		tempColor,
	    	uniform float4	color1,
	    	uniform float	brightness,
	    	uniform float	contrast,
	    	out float4 		outColor : COLOR
	    )

{
  	float4 c; 
	color1 = 0.5, 0.5, 0.5,  1.0   ;
	brightness = (brightness/100) ;
	contrast =   (contrast/100) +.5;

	texCoords.x=texCoords.x - align.x; //overall position
 	texCoords.y=texCoords.y-align.y;
	c.b = tex2D(map, texCoords.xy ) ;
	tempColor.b = c.b; 

	texCoords.x=texCoords.x + (align.x*2.);
 	texCoords.y=texCoords.y+(align.y*2.);
	c.r = tex2D(map, texCoords.xy ) ;
	tempColor.r = c.r; 

	texCoords.x=texCoords.x - align.xyz;
 	texCoords.y=texCoords.y-align.y;
	c.g = tex2D(map, texCoords.xy ) ;
	tempColor.g   = c.g; 





c = c + (brightness);
    outColor = color1+(c-color1)* ((contrast )+.5);
	}


/*pixelfantastic*/





//spfx 
// 
// group "pixelfantastic" "pf::spfx"
// effect "Mosaic" "pf::mosaic"
// float "size" "Size"  1  0.  15.
// color "color" "Color"  1. 1. 1. 1.
// float "soft" "Softness"  0.  0 1.
// float "lamp" "Lamp"  .5  0 25.
//

//spfx

void main(  in float2 		texCoords : TEXCOORD0, 
	    uniform sampler2D 	map,
	    uniform float4	color,
	    uniform float	size,
	    uniform float	soft,
	    uniform float	lamp,
 	    uniform float2      delta,
	    out float4 		outColor : COLOR
	    )
{
    float x;
    float y;
    float px;
    float py;
    float d;
    float2 coords;
    int cx, cy;
     int ctx, cty;
    x = texCoords.x;
    y = texCoords.y;
   

    if (size < .1) { 
       size = .1; 
    }
    size = (int)(size * 10);
    x =  x / delta.x;
    y =  y / delta.y;


    cx = (int)x % (int)size;
    cy = (int)y % (int)size;
    ctx = (int)x / (int)size;
    cty = (int)y / (int)size;

    x -= ((float)size *ctx);
    y -= ((float)size* cty);
    x -= (size / 2.);
    y -= (size / 2.);

    d = sqrt(x * x + y * y);
    d =1- (d /size * lamp); 
    d = d * (((1-soft)* lamp) + 1);
    d = min(d, 1);
    coords.x = ((size * ctx) + (size /2.)) * delta.x;
    coords.y = ((size * cty) + (size /2.)) * delta.y;
    float4 c = tex2D(map, coords);

    c = c * d * color;
    outColor = c;
}


/* tweeked by pixelfantastic*/



//spfx 
// 
// group "pixelfantastic" "pf::spfx"
// effect "rasterLines" "pf::Raster"
// float "lines" "Lines"  405  100  1000
// float "intensity" "Intensity%"  25  0  100
//
//spfx


void main(  in float2 		texCoords : TEXCOORD0, 
	    uniform sampler2D 	map,
	    uniform float	lines,
	    uniform float	intensity,
	    out float4 		outColor : COLOR
	    )
{

intensity = (intensity)/100 ;
   	float4 c = tex2D(map, texCoords.xy ) ; 
	float4 tempC = c;
	c = c.r*sin(texCoords.y*lines);
	outColor = ( tempC+(c*(intensity)))   ;   


}


/*pixelfantastic*/


//spfx 
// 
// group "pixelfantastic" "pf::spfx"
// effect "rasterLines_V" "pf::RasterV"
// float "lines" "Lines"  500  10  2000
// float "intensity" "Intensity%"  25  0  100
//
//spfx


void main(  in float2 		texCoords : TEXCOORD0, 
	    uniform sampler2D 	map,
	    uniform float	lines,
	    uniform float	intensity,
	    out float4 		outColor : COLOR
	    )
{

intensity = (intensity)/100 ;
   	float4 c = tex2D(map, texCoords.xy ) ; 
	float4 tempC = c;
texCoords.y = texCoords.x;
	c = c.r*sin(texCoords.y*lines);
	outColor = ( tempC+(c*(intensity)))   ;   


}


/*pixelfantastic*/


//spfx 
// 
// group "pixelfantastic" "pf::spfx"
// effect "sharpen_Bazza" "pf::SharpenBazza"
// float "sharpen" "Sharpen"  5  0  10

//
//spfx


void main(  in float2 		texCoords : TEXCOORD0, 
	    uniform sampler2D 	map,
	    uniform float	sharpen,
		float2		pos,
	    out float4 		outColor : COLOR

	    )
{
sharpen = sharpen /20000.;
outColor = tex2D(map, texCoords);
outColor += tex2D(map, texCoords.xy+sharpen);
outColor -= tex2D(map, texCoords.xy+(sharpen*2.))/2;
outColor -= tex2D(map, texCoords.xy-(sharpen*3.))/2;
outColor =outColor ; 

}




/*pixelfantastic*/



//spfx 
// 
// group "pixelfantastic" "pf::spfx"
// effect "twoToneBazza" "pf::Twotonebazza"
// float "threshold" "Threshold"  50  0.  100.
// color "dark" "Dark"  0. 0. 0.. 1.
// color "light" "Light"  .8 .8 .8  1.
//
//spfx

void main(  in float2 		texCoords : TEXCOORD0, 
	    	uniform sampler2D 	map,
	    	uniform float4	dark,
 		uniform float4	light,
	    	uniform float	threshold,
	    	out float4 		outColor : COLOR
	    )
{

outColor.a = 1f;
outColor.rgb= tex2D(map,texCoords);
threshold = threshold/100.0;

outColor.rgb = (outColor.r + outColor.g + outColor.b)/3.0f;

if (outColor.r <.2 || outColor.r >threshold) outColor.r = dark.r; else outColor.r = light.r;
if (outColor.g <.2 || outColor.g >threshold) outColor.g = dark.g; else outColor.g = light.g;
if (outColor.b <.2 || outColor.b >threshold) outColor.b = dark.b; else outColor.b = light.b;

}


/*pixelfantastic*/



//spfx 
// 
// group 	"pixelfantastic" "pf::spfx"
// effect 	"vignette" "pf::Vignette"
// float 	"size" "Size"  12  0.  500.
// float 	"isolate" "Isolate"  50  0.  100.
// color 	"opacity" "opacity"  0. 0. 0. .3456
// imagepoint 	"place" "Place" 500 400 0
//
//spfx

void main(  	in float2 	texCoords : TEXCOORD0, 
	    	uniform sampler2D map,
	   	uniform float4	opacity,
 		uniform float4	isolate,
    		uniform float4	tempC,
		uniform float3	place,
	    	uniform float	size,
	    	uniform float	soft,
 	    	uniform float2  delta,
	    	out float4 	outColor : COLOR

	    )
	{
    	float4 c = tex2D(map, texCoords.xy ) ; 
	tempC = c ;
	soft = 0.8; //optimum for smoothness
    	float x;
    	float y;
    	float px;
    	float d;
    	float e;
    	float2 coords;
    	int cx, cy;
     	int ctx, cty;
    	x = texCoords.x - place.x;
    	y = texCoords.y -place.y;
   

    	if (size < .1) { size = .1; }
    	size = (int)(size * 5);
    	x = (x / (delta.y))/.5   ;
    	y = y / delta.y  ;

    	d = sqrt(x*x  + y*y  );
    	d =1- (d /size *2); //two
    	d = d * (((soft)) );
    	d = min(d, 2);
    	c = c * (d * (isolate/100.)) ;
	outColor =tempC + c/4  ;
	outColor = outColor + opacity ; //add in any more alpha needed for opacity
}

//pixelfantastic

//spfx 
// 
// group "pixelfantastic" "pf::spfx"
// effect "waveBazza" "pf::Wavebazza"
// float "waveX" "WaveX"  25  -100.  100.
// float "waveY" "WaveY"  10  -100.  100.
//
//spfx


void main(  in float2 		texCoords : TEXCOORD0, 
	    uniform sampler2D 	map,
	    uniform float	waveX,
	    uniform float	waveY,
	    out float4 		outColor : COLOR
	    )
{
waveX= waveX/300; //calm it down
waveY= waveY/300; //calm it down

  texCoords.y=texCoords.y + sin(texCoords.x * 20)* waveY;  
  texCoords.x=texCoords.x + sin(texCoords.y * 10)* waveX;  

    float4 c = tex2D(map, texCoords.xy ) ;


outColor = c;   

}


/*pixelfantastic*/



//spfx 
// 
// group "IFX SPFX" "ifx::spfx"
// effect "Funky Fill" "ifx::funkyfill"
// color "c1" "Color 1" 0 0 0 0
// color "c2" "Color 2" 1 1 1 1 
//
//spfx

#define RA 1.

void main(  in float2 		texCoords : TEXCOORD0, 
	    uniform sampler2D 	map,
	    uniform float4	c1,
	    uniform float4	c2,
	    out float4 		outColor : COLOR
	    )
{
    float4 c = tex2D(map, texCoords);

    c = ( c2 - c1 ) * texCoords.x + c1;

    outColor = c;
}

